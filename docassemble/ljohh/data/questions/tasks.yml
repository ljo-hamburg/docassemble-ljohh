---
# Sets a variable in the interview. This is used in the context of a
# background_action_response.
event: set_variable
code: |
  for name, value in action_arguments().items():
    define(name, value)
  background_response()
---
# A task that adds a row to the Anmeldungen.
need: msgraph
code: |
  if testmodus:
    save_data_task = None
  else:
    save_data_task = background_action(
      'append_to_table',
      'refresh',
    )
---
# This action saves member_data to a spreadsheet configured via action arguments.
# All arguments are required.
# - spreadsheet: This argument provides the spreadsheet ID
# - range: This argument provides the range in the spreadsheet where the data
#          should be inserted.
# - test_variable: This argument provides the variable to fill in test mode.
event: append_to_table
need: msgraph
code: |
  background = interface() in {"worker", "cron"}
  result = msgraph.add_table_data(
    daten["Anmeldungen"]["Bibliothek"],
    daten["Anmeldungen"]["Dokument"],
    daten["Anmeldungen"]["Tabelle"],
    member_data
  ).json()
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# A task that adds the member email to a mailing list.
code: |
  if testmodus:
    register_player_email_task = None
  else:
    register_player_email_task = background_action(
      'register_email',
      'refresh',
      email=mitglied.email,
      group=daten["Mailingliste"]
    )
---
# A task that adds the parent email to a mailing list.
code: |
  if testmodus or not minderjaehrig:
    register_parent_email_task = None
  else:
    email = eltern.email if defined('eltern.email') else ''
    register_parent_email_task = background_action(
      'register_email',
      'refresh',
      email=email,
      group=daten["Mailingliste (Eltern)"]
    )
---
# A task that adds the member email to a mailing list (but only for true
# members).
code: |
  if testmodus or status == "gast":
    register_member_email_task = None
  else:
    register_member_email_task = background_action(
      'register_email',
      'refresh',
      email=mitglied.email,
      group=daten["Mailingliste (Mitglieder)"],
    )
---
# Adds an email address to a group. The action receives the following arguments:
# - test_variable: The variable name to fill in testing mode.
# - email: The email address that should be added.
# - group: The group that the address should be added to.
# - condition (optional): A boolean value. If this is set to false the action
#                         will be skipped outside of testing mode. The default
#                         is True.
event: register_email
code: |
  background = interface() in {"worker", "cron"}
  result = add_group_member(
    action_argument('group'),
    action_argument('email')
  )
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# A task that assembles the registration PDF.
code: anmeldung_task = background_action('assemble_anmeldung', 'refresh')
---
# Assembles the registration pdf.
event: assemble_anmeldung
code: |
  background_response_action(
    'set_variable',
    anmeldung=anmeldeformular
  )
---

---
# A task that archives the registration PDF to a folder.
need: [anmeldung, msgraph]
code: |
  if testmodus:
    archive_registration_task = None
  else:
    archive_registration_task = background_action(
      'archive_registration',
      'refresh'
    )
---
# Archives the registration PDF to a folder. This action does not receive
# arguments.
event: archive_registration
need: [anmeldung, msgraph]
code: |
  background = interface() in {"worker", "cron"}
  drive = daten["Archivordner"]["Bibliothek"]
  folder = daten["Archivordner"]["Ordner"]
  result = msgraph.upload_file(
    drive,
    folder,
    anmeldung.pdf.filename,
    open(anmeldung.pdf.path(), 'rb')
  ).json()
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# Sends an email to the registered email address
need: [anmeldung, mailgun]
code: |
  if testmodus:
    member_email_task = None
  else:
    member_email_task = background_action('send_member_email', 'refresh')
---
# Sends an email to the registered email address.
event: send_member_email
need: [anmeldung, mailgun]
code: |
  background = interface() in {"worker", "cron"}
  result = mailgun.send_email(
      to=[mitglied],
      template=mitglied_email,
      attachments=[anmeldung.pdf, teilnahmebedingungen, geschaeftsordnung]
  )
  if background:
    background_response(result)
  else:
    json_response(result)
---
