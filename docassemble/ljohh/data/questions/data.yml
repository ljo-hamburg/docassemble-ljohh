---
features:
  navigation: true
  hide navbar: false
  hide standard menu: true
  labels above fields: true
  javascript: actions.js
---
objects:
  mitglied: Individual
  eltern: Individual
  bedingungen: DAObject
---
include:
  - tasks.yml
  - defs.yml
---
modules:
  - .util
  - .ljo
---
# Die minderjaehrig Variable ist True, wenn ein Mitglied unter 18 ist. Dafür
# muss mitglied.birthdate definiert sein.
code: |
  minderjaehrig = mitglied.age_in_years() < 18
  if minderjaehrig:
    need(Elternkontakt)
---
# Berechnet, ob die Teilnahmebedingungen akzeptiert wurden. Dies kann benutzt
# werden, um ggf. die notwendige Frage nach den Bedingungen zu stellen, falls
# bestimmte Bedingungne noch nicht akzeptiert sind.
code: |
  bedingungen.akzeptiert = all([
    bedingungen.tnbedingungen,
    bedingungen.aufnahmen,
    bedingungen.finanzierung,
    bedingungen.newsletter
  ])
  if minderjaehrig:
    bedingungen.akzeptiert = (
      bedingungen.akzeptiert and bedingungen.veranstaltungsort
    )
---
# Lädt die Teilnahmebedingungen von der LJO-Website.
code: |
  teilnahmebedingungen = DAFile('teilnahmebedingungen')
  teilnahmebedingungen.initialize(filename="Teilnahmebedingungen.pdf")
  teilnahmebedingungen.from_url("https://ljo-hamburg.de/Teilnahmebedingungen")
  teilnahmebedingungen.commit()
---
# Lädt die Geschäftsordnung von der LJO-Website.
code: |
  geschaeftsordnung = DAFile('geschaeftsordnung')
  geschaeftsordnung.initialize(filename="Geschaeftsordnung.pdf")
  geschaeftsordnung.from_url("https://ljo-hamburg.de/Geschaeftsordnung")
  geschaeftsordnung.commit()
---
# Der Status einer Anmeldung wird über einen URL-Parameter festgelegt.
code: |
  status = url_args.get("status", "").lower()
  if status not in ["mitglied", "flex", "aushilfe"]:
    status = "mitglied"
---
# Der Testmodus wird über einen URL-Parameter oder eine Konfigurationsvariable
# festgelegt.
code: testmodus = url_args.get('test', False) or daten.get("Testmodus", False)
---
# Startet alle Hintergrundaufgaben und aktiviert den Wartebildschirm, bis diese
# beendet sind.
code: |
  if not all(task.ready() for task in [
      save_data_task,
      register_member_email_task,
      register_parent_email_task,
      member_email_task,
      orga_email_task,
      archive_registration_task
  ]):
    Warten
  else:
    Abschicken = True
---
# Wenn nach der Anmeldung gefragt wird, wird diese im Hintergrund erstellt.
# Währenddessen wird ein Wartebildschirm gezeigt, Dies ist dazu da, dass der
# "Absenden" Schritt einfach übersprungen werden kann.
sets: anmeldung
need: anmeldung_task
code: Warten
---
